// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts (customers, guides, admins)
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String    // Hashed password
  role              UserRole  @default(CUSTOMER)
  phone             String?
  address           String?
  emergencyContact  String?
  image             String?   // NextAuth image field
  drivingLicense    String?   // License number
  licenseExpiry     DateTime?
  experienceLevel   RidingDifficulty?
  profileImage      String?   // URL to image
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  bookings          Booking[]
  reviews           Review[]
  guidedTours       Tour[]    @relation("TourGuide")
  accounts          Account[]
  sessions          Session[]
  guidedSchedules   TourSchedule[]
  guideProfile      GuideProfile?
  customerProfile   CustomerProfile?
  auditLogs         AuditLog[]
  waitlistEntries   WaitlistEntry[]
}

enum UserRole {
  CUSTOMER
  GUIDE
  ADMIN
}

// Keep this enum for both users and motorcycles
enum RidingDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// Motorcycle inventory
model Motorcycle {
  id              String    @id @default(cuid())
  make            String
  model           String
  year            Int
  engineSize      Int       // in cc
  type            BikeType
  description     String?   @db.Text
  dailyRate       Decimal   @db.Decimal(10, 2)
  images          String[]  // Array of image URLs
  available       Boolean   @default(true)
  maintenanceDate DateTime?
  features        String[]  // Array of features
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        BookingMotorcycle[]
  tourMotorcycles TourMotorcycle[]
  availability    MotorcycleAvailability[]
  brand           String
  weight          Int       // in kg
  seatHeight      Int       // in mm
  imageUrl        String?
  difficulty      RidingDifficulty
  isAvailable     Boolean   @default(true)
}

enum BikeType {
  ADVENTURE
  CRUISER
  SPORT
  TOURING
  DUAL_SPORT
  OFF_ROAD
}

// Tours offered
model Tour {
  id              String    @id @default(cuid())
  name            String
  description     String    @db.Text
  difficulty      DifficultyLevel
  duration        Int       // in days
  distance        Int       // in kilometers
  startLocation   String
  endLocation     String
  route           Json?     // GeoJSON for route
  highlights      String[]
  inclusions      String[]
  exclusions      String[]
  maxParticipants Int
  basePrice       Decimal   @db.Money
  images          String[]  // Array of image URLs
  published       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  guideId         String?
  guide           User?     @relation("TourGuide", fields: [guideId], references: [id])
  schedules       TourSchedule[]
  motorcycles     TourMotorcycle[]
  accommodations  TourAccommodation[]
  itinerary       TourItinerary[]
  deleted         Boolean   @default(false)
  deletedAt       DateTime?
  
  // Add these relations
  categoryId      String?
  category        TourCategory? @relation(fields: [categoryId], references: [id])
  tags            Tag[]         @relation("TourTags")
  startLocationId String?
  startLocationDetails Location? @relation("TourStart", fields: [startLocationId], references: [id])
  endLocationId   String?
  endLocationDetails Location? @relation("TourEnd", fields: [endLocationId], references: [id])
}

enum DifficultyLevel {
  EASY
  MODERATE
  CHALLENGING
  EXTREME
}

// Available tour dates
model TourSchedule {
  id              String           @id @default(cuid())
  tourId          String
  tour            Tour             @relation(fields: [tourId], references: [id], onDelete: Cascade)
  startDate       DateTime
  endDate         DateTime
  price           Decimal          @db.Decimal(10, 2)
  availableSpots  Int
  status          ScheduleStatus   @default(OPEN)
  weatherForecast Json?     // Weather data
  notes           String?   @db.Text
  guideId         String?   // Guide assigned to this specific schedule
  guide           User?     @relation(fields: [guideId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
  motorcycleAvailability MotorcycleAvailability[]
  waitlistEntries WaitlistEntry[]
}

enum ScheduleStatus {
  OPEN
  FULL
  CANCELLED
  COMPLETED
}

// Motorcycles available for specific tours
model TourMotorcycle {
  id            String     @id @default(cuid())
  tourId        String
  tour          Tour       @relation(fields: [tourId], references: [id], onDelete: Cascade)
  motorcycleId  String
  motorcycle    Motorcycle @relation(fields: [motorcycleId], references: [id])
  quantity      Int        @default(1)  // How many of this model are available
}

// Accommodations during tours
model TourAccommodation {
  id            String     @id @default(cuid())
  tourId        String
  tour          Tour       @relation(fields: [tourId], references: [id], onDelete: Cascade)
  name          String
  location      String
  description   String?    @db.Text
  nightNumber   Int        // Which night of the tour
  type          AccommodationType
  amenities     String[]
  images        String[]
  
  // Add location relation
  locationId    String?
  locationDetails Location? @relation(fields: [locationId], references: [id])
}

enum AccommodationType {
  HOTEL
  LODGE
  CAMPING
  GUESTHOUSE
  RESORT
}

// Customer bookings
model Booking {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  tourScheduleId    String
  tourSchedule      TourSchedule      @relation(fields: [tourScheduleId], references: [id])
  bookingDate       DateTime          @default(now())
  status            BookingStatus     @default(PENDING)
  totalAmount       Decimal           @db.Decimal(10, 2)
  paidAmount        Decimal           @db.Decimal(10, 2) @default(0)
  participants      Int
  specialRequests   String?           @db.Text
  insuranceOption   Boolean           @default(false)
  equipmentRentals  EquipmentRental[]
  motorcycles       BookingMotorcycle[]
  payments          Payment[]
  review            Review?
  paymentPlan       PaymentPlan?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

// Motorcycles assigned to bookings
model BookingMotorcycle {
  id            String     @id @default(cuid())
  bookingId     String
  booking       Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  motorcycleId  String
  motorcycle    Motorcycle @relation(fields: [motorcycleId], references: [id])
  riderId       String     // Which rider in the booking gets this motorcycle
}

// Equipment rentals
model EquipmentRental {
  id            String     @id @default(cuid())
  bookingId     String
  booking       Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  equipmentType EquipmentType
  quantity      Int
  pricePerDay   Decimal    @db.Decimal(10, 2)
}

enum EquipmentType {
  HELMET
  JACKET
  GLOVES
  BOOTS
  GPS
  LUGGAGE
  CAMERA
  COMMUNICATION
}

// Payment records
model Payment {
  id            String        @id @default(cuid())
  bookingId     String
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  paymentDate   DateTime      @default(now())
  status        PaymentStatus @default(PENDING)
  transactionId String?
  notes         String?
  
  // Add payment plan relation
  paymentPlanId String?
  paymentPlan   PaymentPlan? @relation(fields: [paymentPlanId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Customer reviews
model Review {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  bookingId     String     @unique
  booking       Booking    @relation(fields: [bookingId], references: [id])
  rating        Int        // 1-5 stars
  comment       String?    @db.Text
  tourHighlight String?
  photos        String[]   // URLs to photos
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  published     Boolean    @default(false)
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tour itinerary - daily activities
model TourItinerary {
  id          String    @id @default(cuid())
  tourId      String
  tour        Tour      @relation(fields: [tourId], references: [id], onDelete: Cascade)
  dayNumber   Int       // Which day of the tour
  title       String    // E.g., "Day 1: Bangkok to Chiang Mai"
  description String    @db.Text
  distance    Int?      // Distance covered in km
  activities  String[]  // Array of activities
  meals       String[]  // Which meals are included (breakfast, lunch, dinner)
  highlights  String[]  // Special highlights of the day
  overnight   String?   // Where travelers stay overnight
  images      String[]  // Images for this day
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  action      String      // CREATE, UPDATE, DELETE
  entityType  String      // Tour, Booking, etc.
  entityId    String
  details     Json?       // What changed
  timestamp   DateTime    @default(now())
}

model MotorcycleAvailability {
  id            String       @id @default(cuid())
  motorcycleId  String
  motorcycle    Motorcycle   @relation(fields: [motorcycleId], references: [id])
  startDate     DateTime
  endDate       DateTime
  reason        String?      // TOUR, MAINTENANCE, etc.
  tourScheduleId String?
  tourSchedule  TourSchedule? @relation(fields: [tourScheduleId], references: [id])
}

model GuideProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?   @db.Text
  languages       String[]
  certifications  String[]
  specialties     String[]  // Off-road, mountain, etc.
  yearsExperience Int       @default(0)
}

model CustomerProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  ridingExperience Int?     // Years
  preferredBikeTypes BikeType[]
  dietaryRestrictions String[]
  medicalNotes    String?   @db.Text
}

model PaymentPlan {
  id            String    @id @default(cuid())
  bookingId     String    @unique  // Make unique to ensure one plan per booking
  booking       Booking   @relation(fields: [bookingId], references: [id])
  totalAmount   Decimal   @db.Decimal(10, 2)
  installments  Int
  frequency     String    // WEEKLY, MONTHLY
  payments      Payment[]
}

model WaitlistEntry {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  tourScheduleId  String
  tourSchedule    TourSchedule @relation(fields: [tourScheduleId], references: [id])
  requestDate     DateTime  @default(now())
  participants    Int       @default(1)
  notes           String?
  status          String    @default("WAITING") // WAITING, OFFERED, EXPIRED
}

model TourCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  tours       Tour[]
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  tours       Tour[]    @relation("TourTags")
}

model Location {
  id          String    @id @default(cuid())
  name        String
  address     String?
  city        String
  country     String
  latitude    Float?
  longitude   Float?
  toursStarting Tour[] @relation("TourStart")
  toursEnding   Tour[] @relation("TourEnd")
  accommodations TourAccommodation[]
}
